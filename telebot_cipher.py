import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = ":)"
bot = telebot.TeleBot(TOKEN)

cipher_dict = {
    '–ê': '@', '–ë': '#', '–í': '$', '–ì': '%', '“ê': '&',
    '–î': '*', '–ï': '(', '–Ñ': ')', '–ñ': '+', '–ó': '-',
    '–ò': '=', '–Ü': '_', '–á': '{', '–ô': '}', '–ö': '[',
    '–õ': ']', '–ú': ':', '–ù': ';', '–û': "'", '–ü': '"',
    '–†': '|', '–°': '/', '–¢': '7', '–£': '~', '–§': '^',
    '–•': '?', '–¶': '!', '–ß': '@', '–®': '#', '–©': '$',
    '–¨': '%', '–Æ': '^', '–Ø': '&'
}

latin_key = {
    'A': '@', 'B': '#', 'C': '$', 'D': '%', 'E': '&', 'F': '*', 'G': '(',
    'H': ')', 'I': '!', 'J': '^', 'K': '_', 'L': '+', 'M': '~', 'N': '`',
    'O': '-', 'P': '=', 'Q': '{', 'R': '}', 'S': '[', 'T': ']', 'U': ';',
    'V': ':', 'W': '"', 'X': "'", 'Y': '<', 'Z': '>', ' ': ' '
}

user_states = {}

def encrypt_masonic(text, lang):
    used_dict = cipher_dict if lang == "–ö–∏—Ä–∏–ª–∏—Ü—è" else latin_key
    return ''.join(used_dict.get(char.upper(), char) for char in text)

def decrypt_masonic(text, lang):
    used_dict = cipher_dict if lang == "–ö–∏—Ä–∏–ª–∏—Ü—è" else latin_key
    reverse_dict = {v: k for k, v in used_dict.items()}
    return ''.join(reverse_dict.get(char, char) for char in text)

def cesar_cipher(text, shift):
    result = ""
    for char in text:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - base + shift) % 26 + base)
        else:
            result += char
    return result

def cesar_decipher(text, shift):
    return cesar_cipher(text, -shift)

@bot.message_handler(commands = ['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç, –û–±–µ—Ä–∏ —Ç–∏–ø —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:", reply_markup=main_menu())

def main_menu():
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üîê –®—Ä–∏—Ñ—Ç –¶–µ–∑–∞—Ä—è", callback_data="cesar"),
               InlineKeyboardButton("üïµÔ∏è –ú–∞—Å–æ–Ω—Å—å–∫–∏–π", callback_data="masonic"))
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.message.chat.id
    state = user_states.get(user_id, {})

    if call.data in ['cesar', 'masonic']:
        state['cipher'] = call.data
        bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup = lang_menu())

    elif call.data in ['–ö–∏—Ä–∏–ª–∏—Ü—è', '–õ–∞—Ç–∏–Ω–∏—Ü—è']:
        state['lang'] = call.data
        user_states[user_id] = state
        if state['cipher'] == 'cesar':
            bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –∑—Å—É–≤ (—á–∏—Å–ª–æ):")
        else:
            bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∞–±–æ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")

    state['awaiting_input'] = True
    user_states[user_id] = state

    bot.answer_callback_query(call.id)

def lang_menu():
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–ö–∏—Ä–∏–ª–∏—Ü—è", callback_data = "–ö–∏—Ä–∏–ª–∏—Ü—è"),
               InlineKeyboardButton("–õ–∞—Ç–∏–Ω–∏—Ü—è", callback_data = "–õ–∞—Ç–∏–Ω–∏—Ü—è"))
    return markup

@bot.message_handler(func = lambda message: True)
def text_handler(message):
    user_id = message.chat.id
    state = user_states.get(user_id)

    if not state or not state.get("awaiting_input"):
        return
    
    if state['cipher'] == 'cesar' and 'shift' not in state:
        try:
            shift = int(message.text.strip())
            state['shift'] = shift
            bot.send_message(user_id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∞–±–æ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
            user_states[user_id] = state
            return
        except ValueError:
            bot.send_message(user_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")
            return
        
    text = message.text.strip()
    lang = state.get('lang')
    if state['cipher'] == 'caesar':
        shift = state.get('shift', 3)
        encrypted = cesar_cipher(text, shift)
        decrypted = cesar_decipher(encrypted, shift)
    else:
        encrypted = encrypt_masonic(text, lang)
        decrypted = decrypt_masonic(encrypted, lang)

    response = f"üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {encrypted}\nüîì –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted}"
    bot.send_message(user_id, response)
    user_states[user_id] = {}

bot.infinity_polling()